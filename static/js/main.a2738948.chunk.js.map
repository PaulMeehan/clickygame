{"version":3,"sources":["components/Banner.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["Mainform","props","react_default","a","createElement","className","id","message","numGuesses","highScore","Image","src","source","alt","onClick","chooseImage","refId","imagesAry","url","selected","App","state","images","stopShake","document","querySelectorAll","forEach","thisImage","classList","remove","shakeImages","add","setTimeout","_this","shuffelImages","currentAry","oldAry","slice","newAry","randomIndex","i","length","Math","floor","random","push","splice","newHighScore","newNumGuesses","newMessage","mixedAry","setState","_this2","this","components_Banner","map","currentImage","components_Image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2738948.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Banner.css\";\r\n\r\nfunction Mainform(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\" id=\"topBanner\">\r\n\r\n        <div className=\"col-md-4\" id=\"name\">\r\n          Clicky Game!\r\n        </div>\r\n\r\n        <div className=\"col-md-4\" id=\"message\">\r\n          {props.message}\r\n        </div>\r\n\r\n        <div className=\"col-md-4\" id=\"scores\">\r\n          Your score = {props.numGuesses}\r\n          <br />\r\n          Top Score = {props.highScore} \r\n        </div>\r\n        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Mainform;\r\n","import React from \"react\";\r\nimport \"../css/Image.css\";\r\n\r\nfunction Image(props) {\r\n  return (\r\n    <div className=\"card imageCard\">\r\n      <div className = \"card-body\">\r\n        <img src={props.source} className=\"images\" alt=\"character\" onClick={ () => props.chooseImage(props.refId)}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from 'react';\nimport Banner from \"./components/Banner\";\nimport Image from \"./components/Image\";\nimport './App.css';\n\nconst imagesAry = [\n  {\n    url: \"images/buggs.jpg\",\n    refId: 0,\n    selected: false\n  },\n  {\n    url: \"/images/daffy.jpg\",\n    refId: 1,\n    selected: false\n  },\n  {\n    url: \"./images/elmer.jpg\",\n    refId: 2,\n    selected: false\n  },\n  {\n    url: \"../images/foghorn.jpg\",\n    refId: 3,\n    selected: false\n  },\n  {\n    url: \"public/images/marvin.png\",\n    refId: 4,\n    selected: false\n  },\n  {\n    url: \"/public/images/porky.png\",\n    refId: 5,\n    selected: false\n  },\n  {\n    url: \"./public/images/sam.png\",\n    refId: 6,\n    selected: false\n  }, \n  {\n    url: \"../public/images/sylvester.png\",\n    refId: 7,\n    selected: false\n  }, \n  {\n    url: \"images/taz.jpg\",\n    refId: 8,\n    selected: false\n  }, \n  {\n    url: \"clickhere/images/tweety.png\",\n    refId: 9,\n    selected: false\n  }, \n  {\n    url: \"/clickhere/images/wile.jpg\",\n    refId: 10,\n    selected: false\n  },\n  {\n    url: \"./clickhere/images/gossamer.jpg\",\n    refId: 11,\n    selected: false\n  }\n];\n\nclass App extends Component {\n\n  state = {\n    images: imagesAry,\n    numGuesses: 0,\n    highScore: 0,\n    message: \"Click on a character. But don't choose the same one twice!\"\n  };\n\n\n  stopShake = () => {\n    var imgList = document.querySelectorAll(\"div.imageCard\");\n    imgList.forEach(function (thisImage) {\n      thisImage.classList.remove(\"apply-shake\");\n    });\n  }\n  \n  shakeImages = () => {\n    var imgList = document.querySelectorAll(\"div.imageCard\");\n    imgList.forEach(function(thisImage) {\n      thisImage.classList.add(\"apply-shake\");\n    });\n    setTimeout(this.stopShake, 750);\n  }\n\n\n  shuffelImages = currentAry => {\n    const oldAry = currentAry.slice(0);\n    const newAry = [];\n    var randomIndex = 0;\n    for (var i=0; i < currentAry.length; i++) {\n      randomIndex = Math.floor(Math.random() * ((oldAry.length - 1) + 1));\n      newAry.push(oldAry[randomIndex]);\n      oldAry.splice(randomIndex,1);\n    }\n    return newAry;\n  }\n\n  chooseImage = refId => {\n    var newHighScore = this.state.highScore;\n    var newNumGuesses = 0;\n    var newMessage = \"\";\n    if (imagesAry[refId].selected === false) {\n      imagesAry[refId].selected = true;\n      newNumGuesses = this.state.numGuesses + 1;\n      newMessage = \"You chose correctly!  Choose another.\"\n      if (newNumGuesses > newHighScore) {\n        newHighScore = newNumGuesses;\n        newMessage = \"You have the new high score!  Keep going\"\n      }\n    } else {\n      this.shakeImages();\n\n      newMessage = \"Game over, loser!  Start again.\";\n      for (var i=0; i < imagesAry.length; i++) {\n        imagesAry[i].selected = false;\n      }\n    }\n    var mixedAry = this.shuffelImages(imagesAry);\n    this.setState({\n      images: mixedAry,\n      numGuesses: newNumGuesses,\n      highScore: newHighScore,\n      message: newMessage\n    });\n  }\n\n  render () {\n    return (\n      <div className=\"container\" id=\"fullScreen\">\n        <Banner \n          numGuesses={this.state.numGuesses}\n          highScore={this.state.highScore}\n          message={this.state.message}\n        />\n\n        <div className=\"row\" >\n          <div className=\"col-md-2\">\n            {/* blank */}\n          </div>\n\n          <div className=\"col-md-8\">\n              {this.state.images.map(currentImage => {\n                return (\n                  <Image \n                    chooseImage={this.chooseImage}\n                    key={currentImage.refId}\n                    source={currentImage.url}\n                    refId={currentImage.refId}\n                  />\n                );\n              })}\n          </div>\n\n          <div className=\"col-md-2\">\n            {/* blank */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// const express = require(\"express\");\n// const app = express();\n// const path = require(\"path\");\n// app.use(express.static(path.join(__dirname, './public')));\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}